/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ppd.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.ppd.services.PpdGrammarAccess;

@SuppressWarnings("all")
public class PpdSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PpdGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Document_ENDPAGETerminalRuleCall_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PpdGrammarAccess) access;
		match_Document_ENDPAGETerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getDocumentAccess().getENDPAGETerminalRuleCall_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getENDGRIDRule())
			return getENDGRIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDLARule())
			return getENDLAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDPAGERule())
			return getENDPAGEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRJRule())
			return getENDRJToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getGRIDRule())
			return getGRIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getHSTRule())
			return getHSTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLARule())
			return getLAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPAGERule())
			return getPAGEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRJRule())
			return getRJToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRICTRule())
			return getSTRICTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVSTRule())
			return getVSTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ENDGRID: '<G/>';
	 */
	protected String getENDGRIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<G/>";
	}
	
	/**
	 * terminal ENDLA : '<LA/>';
	 */
	protected String getENDLAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<LA/>";
	}
	
	/**
	 * terminal ENDPAGE : '<P/>';
	 */
	protected String getENDPAGEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<P/>";
	}
	
	/**
	 * terminal ENDRJ : '<RJ/>';
	 */
	protected String getENDRJToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<RJ/>";
	}
	
	/**
	 * terminal GRID : '<G';
	 */
	protected String getGRIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<G";
	}
	
	/**
	 * terminal HST : "<HS";
	 */
	protected String getHSTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<HS";
	}
	
	/**
	 * terminal LA : '<LA>';
	 */
	protected String getLAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<LA>";
	}
	
	/**
	 * terminal PAGE : '<P';
	 */
	protected String getPAGEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<P";
	}
	
	/**
	 * terminal RJ : '<RJ>';
	 */
	protected String getRJToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<RJ>";
	}
	
	/**
	 * terminal STRICT : 'STRICT';
	 */
	protected String getSTRICTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "STRICT";
	}
	
	/**
	 * terminal VST : "<VS";
	 */
	protected String getVSTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<VS";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Document_ENDPAGETerminalRuleCall_5_q.equals(syntax))
				emit_Document_ENDPAGETerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ENDPAGE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) PAGE '>' (ambiguity) (rule start)
	 *     contents+=Content (ambiguity) (rule end)
	 *     paper=Paper '>' (ambiguity) (rule end)
	 */
	protected void emit_Document_ENDPAGETerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
