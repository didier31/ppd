/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ppd.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.ppd.ppd.Content;
import org.xtext.ppd.ppd.Document;
import org.xtext.ppd.ppd.GB;
import org.xtext.ppd.ppd.HS;
import org.xtext.ppd.ppd.LAB;
import org.xtext.ppd.ppd.Paper;
import org.xtext.ppd.ppd.PpdPackage;
import org.xtext.ppd.ppd.RJB;
import org.xtext.ppd.ppd.Textual;
import org.xtext.ppd.ppd.VS;
import org.xtext.ppd.services.PpdGrammarAccess;

@SuppressWarnings("all")
public class PpdSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PpdGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PpdPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PpdPackage.CONTENT:
				sequence_Content(context, (Content) semanticObject); 
				return; 
			case PpdPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case PpdPackage.GB:
				sequence_GB(context, (GB) semanticObject); 
				return; 
			case PpdPackage.HS:
				sequence_HS(context, (HS) semanticObject); 
				return; 
			case PpdPackage.LAB:
				sequence_LAB(context, (LAB) semanticObject); 
				return; 
			case PpdPackage.PAPER:
				sequence_Paper(context, (Paper) semanticObject); 
				return; 
			case PpdPackage.RJB:
				sequence_RJB(context, (RJB) semanticObject); 
				return; 
			case PpdPackage.TEXTUAL:
				sequence_Textual(context, (Textual) semanticObject); 
				return; 
			case PpdPackage.VS:
				sequence_VS(context, (VS) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Content returns Content
	 *
	 * Constraint:
	 *     (vs=VS? hs=HS? simpleContent=SimpleContent)
	 */
	protected void sequence_Content(ISerializationContext context, Content semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     (paper=Paper? contents+=Content*)
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleContent returns GB
	 *     Frame returns GB
	 *     GB returns GB
	 *
	 * Constraint:
	 *     (columns=INT contents+=Content*)
	 */
	protected void sequence_GB(ISerializationContext context, GB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HS returns HS
	 *
	 * Constraint:
	 *     (spc=INT more?='+'?)
	 */
	protected void sequence_HS(ISerializationContext context, HS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleContent returns LAB
	 *     Frame returns LAB
	 *     LAB returns LAB
	 *
	 * Constraint:
	 *     contents+=Content*
	 */
	protected void sequence_LAB(ISerializationContext context, LAB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Paper returns Paper
	 *
	 * Constraint:
	 *     (width=INT folding?=STRICT?)
	 */
	protected void sequence_Paper(ISerializationContext context, Paper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleContent returns RJB
	 *     Frame returns RJB
	 *     RJB returns RJB
	 *
	 * Constraint:
	 *     contents+=Content*
	 */
	protected void sequence_RJB(ISerializationContext context, RJB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleContent returns Textual
	 *     Textual returns Textual
	 *
	 * Constraint:
	 *     text=TEXT
	 */
	protected void sequence_Textual(ISerializationContext context, Textual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PpdPackage.Literals.TEXTUAL__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PpdPackage.Literals.TEXTUAL__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextualAccess().getTextTEXTTerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VS returns VS
	 *
	 * Constraint:
	 *     (spc=INT more?='+'?)
	 */
	protected void sequence_VS(ISerializationContext context, VS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
