/*
 * generated by Xtext 2.10.0
 */
grammar InternalPpd;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ppd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ppd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ppd.services.PpdGrammarAccess;

}

@parser::members {

 	private PpdGrammarAccess grammarAccess;

    public InternalPpdParser(TokenStream input, PpdGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Document";
   	}

   	@Override
   	protected PpdGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDocumentAccess().getDocumentAction_0(),
					$current);
			}
		)
		this_PAGE_1=RULE_PAGE
		{
			newLeafNode(this_PAGE_1, grammarAccess.getDocumentAccess().getPAGETerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDocumentAccess().getPaperPaperParserRuleCall_2_0());
				}
				lv_paper_2_0=rulePaper
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDocumentRule());
					}
					set(
						$current,
						"paper",
						lv_paper_2_0,
						"org.xtext.ppd.Ppd.Paper");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getDocumentAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDocumentAccess().getContentsContentParserRuleCall_4_0());
				}
				lv_contents_4_0=ruleContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDocumentRule());
					}
					add(
						$current,
						"contents",
						lv_contents_4_0,
						"org.xtext.ppd.Ppd.Content");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			this_ENDPAGE_5=RULE_ENDPAGE
			{
				newLeafNode(this_ENDPAGE_5, grammarAccess.getDocumentAccess().getENDPAGETerminalRuleCall_5());
			}
		)?
	)
;

// Entry rule entryRulePaper
entryRulePaper returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPaperRule()); }
	iv_rulePaper=rulePaper
	{ $current=$iv_rulePaper.current; }
	EOF;

// Rule Paper
rulePaper returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_width_0_0=RULE_INT
				{
					newLeafNode(lv_width_0_0, grammarAccess.getPaperAccess().getWidthINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPaperRule());
					}
					setWithLastConsumed(
						$current,
						"width",
						lv_width_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_folding_1_0=RULE_STRICT
				{
					newLeafNode(lv_folding_1_0, grammarAccess.getPaperAccess().getFoldingSTRICTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPaperRule());
					}
					setWithLastConsumed(
						$current,
						"folding",
						true,
						"org.xtext.ppd.Ppd.STRICT");
				}
			)
		)?
	)
;

// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	iv_ruleContent=ruleContent
	{ $current=$iv_ruleContent.current; }
	EOF;

// Rule Content
ruleContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContentAccess().getVsVSParserRuleCall_0_0());
				}
				lv_vs_0_0=ruleVS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContentRule());
					}
					set(
						$current,
						"vs",
						lv_vs_0_0,
						"org.xtext.ppd.Ppd.VS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContentAccess().getHsHSParserRuleCall_1_0());
				}
				lv_hs_1_0=ruleHS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContentRule());
					}
					set(
						$current,
						"hs",
						lv_hs_1_0,
						"org.xtext.ppd.Ppd.HS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContentAccess().getSimpleContentSimpleContentParserRuleCall_2_0());
				}
				lv_simpleContent_2_0=ruleSimpleContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContentRule());
					}
					set(
						$current,
						"simpleContent",
						lv_simpleContent_2_0,
						"org.xtext.ppd.Ppd.SimpleContent");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSimpleContent
entryRuleSimpleContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleContentRule()); }
	iv_ruleSimpleContent=ruleSimpleContent
	{ $current=$iv_ruleSimpleContent.current; }
	EOF;

// Rule SimpleContent
ruleSimpleContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleContentAccess().getFrameParserRuleCall_0());
		}
		this_Frame_0=ruleFrame
		{
			$current = $this_Frame_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleContentAccess().getTextualParserRuleCall_1());
		}
		this_Textual_1=ruleTextual
		{
			$current = $this_Textual_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTextual
entryRuleTextual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextualRule()); }
	iv_ruleTextual=ruleTextual
	{ $current=$iv_ruleTextual.current; }
	EOF;

// Rule Textual
ruleTextual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_text_0_0=RULE_TEXT
			{
				newLeafNode(lv_text_0_0, grammarAccess.getTextualAccess().getTextTEXTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTextualRule());
				}
				setWithLastConsumed(
					$current,
					"text",
					lv_text_0_0,
					"org.xtext.ppd.Ppd.TEXT");
			}
		)
	)
;

// Entry rule entryRuleFrame
entryRuleFrame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFrameRule()); }
	iv_ruleFrame=ruleFrame
	{ $current=$iv_ruleFrame.current; }
	EOF;

// Rule Frame
ruleFrame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFrameAccess().getGBParserRuleCall_0());
		}
		this_GB_0=ruleGB
		{
			$current = $this_GB_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFrameAccess().getLABParserRuleCall_1());
		}
		this_LAB_1=ruleLAB
		{
			$current = $this_LAB_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFrameAccess().getRJBParserRuleCall_2());
		}
		this_RJB_2=ruleRJB
		{
			$current = $this_RJB_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVS
entryRuleVS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVSRule()); }
	iv_ruleVS=ruleVS
	{ $current=$iv_ruleVS.current; }
	EOF;

// Rule VS
ruleVS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VST_0=RULE_VST
		{
			newLeafNode(this_VST_0, grammarAccess.getVSAccess().getVSTTerminalRuleCall_0());
		}
		(
			(
				lv_spc_1_0=RULE_INT
				{
					newLeafNode(lv_spc_1_0, grammarAccess.getVSAccess().getSpcINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVSRule());
					}
					setWithLastConsumed(
						$current,
						"spc",
						lv_spc_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_more_2_0='+'
				{
					newLeafNode(lv_more_2_0, grammarAccess.getVSAccess().getMorePlusSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVSRule());
					}
					setWithLastConsumed($current, "more", true, "+");
				}
			)
		)?
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getVSAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleHS
entryRuleHS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHSRule()); }
	iv_ruleHS=ruleHS
	{ $current=$iv_ruleHS.current; }
	EOF;

// Rule HS
ruleHS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_HST_0=RULE_HST
		{
			newLeafNode(this_HST_0, grammarAccess.getHSAccess().getHSTTerminalRuleCall_0());
		}
		(
			(
				lv_spc_1_0=RULE_INT
				{
					newLeafNode(lv_spc_1_0, grammarAccess.getHSAccess().getSpcINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHSRule());
					}
					setWithLastConsumed(
						$current,
						"spc",
						lv_spc_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_more_2_0='+'
				{
					newLeafNode(lv_more_2_0, grammarAccess.getHSAccess().getMorePlusSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHSRule());
					}
					setWithLastConsumed($current, "more", true, "+");
				}
			)
		)?
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getHSAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleLAB
entryRuleLAB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLABRule()); }
	iv_ruleLAB=ruleLAB
	{ $current=$iv_ruleLAB.current; }
	EOF;

// Rule LAB
ruleLAB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLABAccess().getLABAction_0(),
					$current);
			}
		)
		(
			this_LA_1=RULE_LA
			{
				newLeafNode(this_LA_1, grammarAccess.getLABAccess().getLATerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLABAccess().getContentsContentParserRuleCall_1_1_0());
					}
					lv_contents_2_0=ruleContent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLABRule());
						}
						add(
							$current,
							"contents",
							lv_contents_2_0,
							"org.xtext.ppd.Ppd.Content");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_ENDLA_3=RULE_ENDLA
			{
				newLeafNode(this_ENDLA_3, grammarAccess.getLABAccess().getENDLATerminalRuleCall_1_2());
			}
		)
	)
;

// Entry rule entryRuleGB
entryRuleGB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGBRule()); }
	iv_ruleGB=ruleGB
	{ $current=$iv_ruleGB.current; }
	EOF;

// Rule GB
ruleGB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGBAccess().getGBAction_0(),
					$current);
			}
		)
		(
			this_GRID_1=RULE_GRID
			{
				newLeafNode(this_GRID_1, grammarAccess.getGBAccess().getGRIDTerminalRuleCall_1_0());
			}
			(
				(
					lv_columns_2_0=RULE_INT
					{
						newLeafNode(lv_columns_2_0, grammarAccess.getGBAccess().getColumnsINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGBRule());
						}
						setWithLastConsumed(
							$current,
							"columns",
							lv_columns_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_3='>'
			{
				newLeafNode(otherlv_3, grammarAccess.getGBAccess().getGreaterThanSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGBAccess().getContentsContentParserRuleCall_1_3_0());
					}
					lv_contents_4_0=ruleContent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGBRule());
						}
						add(
							$current,
							"contents",
							lv_contents_4_0,
							"org.xtext.ppd.Ppd.Content");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_ENDGRID_5=RULE_ENDGRID
			{
				newLeafNode(this_ENDGRID_5, grammarAccess.getGBAccess().getENDGRIDTerminalRuleCall_1_4());
			}
		)
	)
;

// Entry rule entryRuleRJB
entryRuleRJB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRJBRule()); }
	iv_ruleRJB=ruleRJB
	{ $current=$iv_ruleRJB.current; }
	EOF;

// Rule RJB
ruleRJB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRJBAccess().getRJBAction_0(),
					$current);
			}
		)
		(
			this_RJ_1=RULE_RJ
			{
				newLeafNode(this_RJ_1, grammarAccess.getRJBAccess().getRJTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRJBAccess().getContentsContentParserRuleCall_1_1_0());
					}
					lv_contents_2_0=ruleContent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRJBRule());
						}
						add(
							$current,
							"contents",
							lv_contents_2_0,
							"org.xtext.ppd.Ppd.Content");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_ENDRJ_3=RULE_ENDRJ
			{
				newLeafNode(this_ENDRJ_3, grammarAccess.getRJBAccess().getENDRJTerminalRuleCall_1_2());
			}
		)
	)
;

RULE_VST : '<VS';

RULE_HST : '<HS';

RULE_LA : '<LA>';

RULE_ENDLA : '<LA/>';

RULE_PAGE : '<P';

RULE_ENDPAGE : '<P/>';

RULE_GRID : '<G';

RULE_ENDGRID : '<G/>';

RULE_RJ : '<RJ>';

RULE_ENDRJ : '<RJ/>';

RULE_STRICT : 'STRICT';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TEXT : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;
